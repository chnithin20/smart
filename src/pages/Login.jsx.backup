import React, { useState, useContext, createContext } from 'react';
// We use a simplified in-file routing mechanism to simulate react-router-dom
import { Mail, Lock, Car, Facebook } from 'lucide-react'; 

// --- 1. MOCK ROUTING SYSTEM ---
const ROUTES = {
  LOGIN: 'login',
  DASHBOARD: 'dashboard',
  REGISTER: 'register',
  FORGOT_PASSWORD: 'forgot-password',
};

// Global state for current route
const RouterContext = createContext();

const RouterProvider = ({ children }) => {
  const [currentRoute, setCurrentRoute] = useState(ROUTES.LOGIN);

  const navigate = (path) => {
    // Clean path (remove leading slash if present)
    const cleanPath = path.startsWith('/') ? path.substring(1) : path;
    setCurrentRoute(cleanPath);
    // console.log(`Navigating to: /${cleanPath}`);
  };

  // Mock Link Component
  const LinkComponent = ({ to, children, className, onClick }) => (
    <a 
      href="#" 
      onClick={(e) => {
        e.preventDefault();
        navigate(to.replace('/', ''));
        if (onClick) onClick(e);
      }} 
      className={className}
    >
      {children}
    </a>
  );

  return (
    <RouterContext.Provider value={{ currentRoute, navigate, Link: LinkComponent }}>
      {children}
    </RouterContext.Provider>
  );
};

const useNavigate = () => useContext(RouterContext).navigate;
// Ensure we destructure the Link component correctly from context
const Link = (props) => useContext(RouterContext).Link(props);
const useCurrentRoute = () => useContext(RouterContext).currentRoute;


// --- 2. MOCK AUTH CONTEXT ---
const AuthContext = createContext();

const useAuth = () => useContext(AuthContext);

const AuthProvider = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);

  const login = (userData) => {
    // console.log("User logged in:", userData.email);
    setIsAuthenticated(true);
    setUser(userData);
  };

  const logout = () => {
    setIsAuthenticated(false);
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

// --- 3. MOCK TARGET PAGES ---

const Dashboard = () => {
  const { logout } = useAuth();
  const navigate = useNavigate();

  const handleSignOut = () => {
    logout();
    navigate(ROUTES.LOGIN);
  }

  return (
    <div className="min-h-screen bg-gray-950 text-white flex flex-col items-center justify-center p-8">
      <Car size={48} className="text-cyan-400 mb-4 animate-bounce" />
      <h1 className="text-4xl font-bold mb-4 text-cyan-300">SmartPark System Operational!</h1>
      <p className="text-xl text-gray-400 mb-8">Welcome to your connected dashboard.</p>
      {/* Use the regular button with handleSignOut to ensure consistency */}
      <button 
        onClick={handleSignOut} 
        className="px-6 py-3 bg-red-600 rounded-lg hover:bg-red-700 transition-all font-semibold shadow-lg shadow-red-900/50"
      >
        Sign Out
      </button>
    </div>
  );
}

const Register = () => (
    <div className="min-h-screen bg-gray-950 text-white flex flex-col items-center justify-center p-8">
        <h1 className="text-4xl font-bold mb-4 text-cyan-400">System Registration</h1>
        <p className="text-xl text-gray-400 mb-8">Secure your parking profile.</p>
        <Link to="/login" className="text-cyan-400 hover:text-cyan-300 font-semibold transition-colors">
            Go to Login
        </Link>
    </div>
);

const ForgotPassword = () => (
    <div className="min-h-screen bg-gray-950 text-white flex flex-col items-center justify-center p-8">
        <h1 className="text-4xl font-bold mb-4 text-cyan-400">Password Recovery Interface</h1>
        <p className="text-xl text-gray-400 mb-8">Enter your credentials for secure reset.</p>
        <Link to="/login" className="text-cyan-400 hover:text-cyan-300 font-semibold transition-colors">
            Go to Login
        </Link>
    </div>
);


// --- 4. ENHANCED LOGIN COMPONENT ---
const Login = () => {
  const navigate = useNavigate();
  const { login } = useAuth();
  const [showPassword, setShowPassword] = useState(false);
  const [formData, setFormData] = useState({
    email: 'user@smartpark.com', // Pre-fill for convenience
    password: 'securepassword',     // Pre-fill for convenience
    remember: false,
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    // Simulate login
    const userData = { 
      email: formData.email, 
      name: formData.email.split('@')[0],
      phone: '',
      address: '',
      city: '',
      vehicleNumber: 'TS09AA1234',
      vehicleType: 'car'
    };
    login(userData);
    navigate(ROUTES.DASHBOARD);
  };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  // Mock function for social logins
  const handleSocialLogin = (platform) => {
    // console.log(`Attempting login via ${platform}...`);
    const userData = { 
      email: `${platform.toLowerCase()}@smartpark.com`, 
      name: `User via ${platform}`,
      vehicleType: 'car'
    };
    login(userData);
    navigate(ROUTES.DASHBOARD);
  };


  return (
    <div className="min-h-screen bg-gray-950 flex items-center justify-center p-4 relative overflow-hidden font-sans">
      
      {/* Background Grid/Pattern Effect */}
      <div className="absolute inset-0 bg-[url('https://api.mapbox.com/styles/v1/mapbox/dark-v10/sprite@2x.png?fresh=true')] opacity-10"></div>
      <div className="absolute inset-0 bg-gradient-to-b from-gray-950/0 via-gray-950/80 to-gray-950/0"></div>

      <div className="max-w-md w-full relative z-10">
        
        {/* Logo and Header - Updated for interactive hover effect */}
        <div className="text-center mb-10 group"> 
          <div className="inline-flex items-center justify-center w-20 h-20 bg-cyan-700/30 border border-cyan-500/50 rounded-full mb-4 shadow-xl shadow-cyan-900/50 p-2 
                           transition-all duration-500 group-hover:scale-105 group-hover:shadow-[0_0_60px_rgba(0,180,255,0.4)]">
            <Car size={36} className="text-cyan-300 transition-colors duration-500 group-hover:text-white" />
          </div>
          <h1 className="text-4xl font-extrabold text-white tracking-widest mb-2 font-mono">
            SMARTPARK
          </h1>
          <p className="text-sm text-cyan-400 font-semibold uppercase">ACCESS TERMINAL</p>
        </div>

        {/* Login Form Card - With Futuristic Glow */}
        <div className="bg-gray-900/80 backdrop-blur-md rounded-3xl shadow-[0_0_40px_rgba(0,180,255,0.2)] p-10 border border-cyan-700/50 transition-all">
          
          <form onSubmit={handleSubmit} className="space-y-6">
            
            {/* Email */}
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Email / Terminal ID
              </label>
              <div className="relative">
                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-cyan-500" size={20} />
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  className="w-full bg-gray-800 text-white pl-11 pr-4 py-3 rounded-xl border border-gray-700 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 transition-all shadow-inner shadow-gray-900/50"
                  placeholder="user@system.com"
                  required
                />
              </div>
            </div>

            {/* Password */}
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Secure Pin / Password
              </label>
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-cyan-500" size={20} />
                <input
                  type={showPassword ? 'text' : 'password'}
                  name="password"
                  value={formData.password}
                  onChange={handleChange}
                  className="w-full bg-gray-800 text-white pl-11 pr-12 py-3 rounded-xl border border-gray-700 focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 transition-all shadow-inner shadow-gray-900/50"
                  placeholder="••••••••"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-cyan-300 transition-colors"
                  aria-label={showPassword ? 'Hide password' : 'Show password'}
                >
                  {/* Car icon toggle with rotation for "open" state */}
                  <Car size={20} className={`transition-transform duration-300 ${showPassword ? 'rotate-90 text-cyan-400' : ''}`} />
                </button>
              </div>
            </div>

            {/* Remember & Forgot */}
            <div className="flex items-center justify-between">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  name="remember"
                  checked={formData.remember}
                  onChange={handleChange}
                  className="w-4 h-4 text-cyan-500 bg-gray-700 border-gray-600 rounded focus:ring-cyan-500 accent-cyan-600"
                />
                <span className="ml-2 text-sm text-gray-400">Keep session active</span>
              </label>
              <Link to={ROUTES.FORGOT_PASSWORD} className="text-sm text-cyan-400 hover:text-cyan-300 transition-colors hover:underline">
                Forgot Pin?
              </Link>
            </div>

            {/* Submit Button - Electric Glow */}
            <button
              type="submit"
              className="w-full bg-gradient-to-r from-cyan-600 to-blue-700 text-white py-3 rounded-xl font-bold uppercase tracking-wider 
                         hover:from-cyan-500 hover:to-blue-600 focus:outline-none focus:ring-4 focus:ring-cyan-500/50 
                         transition-all transform hover:scale-[1.01] shadow-xl shadow-cyan-800/50"
            >
              System Log-In
            </button>
          </form>

          {/* Divider */}
          <div className="relative my-8">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-cyan-800/50"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-gray-900/80 text-cyan-500 font-semibold uppercase tracking-wider">SECURE ACCESS</span>
            </div>
          </div>

          {/* Social Login/Alternative Access */}
          <div className="grid grid-cols-2 gap-3">
            
            {/* Google Login */}
            <button 
                onClick={() => handleSocialLogin('Google')}
                className="flex items-center justify-center px-4 py-2 bg-gray-800 text-white rounded-xl border border-gray-700 hover:bg-gray-700/70 transition-colors font-medium text-sm shadow-md shadow-gray-900/50"
            >
              {/* Google SVG Icon */}
              <svg className="w-5 h-5 mr-2 text-red-500" viewBox="0 0 24 24">
                <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
              </svg>
              Google
            </button>
            
            {/* Facebook Login */}
            <button 
                onClick={() => handleSocialLogin('Facebook')}
                className="flex items-center justify-center px-4 py-2 bg-gray-800 text-white rounded-xl border border-gray-700 hover:bg-gray-700/70 transition-colors font-medium text-sm shadow-md shadow-gray-900/50"
            >
                <Facebook size={20} className='text-blue-500 mr-2' />
              Facebook
            </button>
          </div>

          {/* Sign Up Link */}
          <p className="mt-8 text-center text-sm text-gray-500">
            New user?{' '}
            <Link to={ROUTES.REGISTER} className="text-cyan-400 hover:text-cyan-300 font-bold transition-colors hover:underline">
              Create SmartPark Profile
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};


// --- 5. MAIN APP COMPONENT FOR RENDERING ---
const MainApp = () => {
    const currentRoute = useCurrentRoute();
    const { isAuthenticated } = useAuth();
    
    let ComponentToRender;

    if (isAuthenticated) {
        // If authenticated, always show the dashboard
        ComponentToRender = Dashboard;
    } else {
        // If not authenticated, determine which unauthenticated page to show
        switch (currentRoute) {
            case ROUTES.DASHBOARD:
                // If the state is dashboard but the user is logged out, show login
                ComponentToRender = Login;
                break;
            case ROUTES.REGISTER:
                ComponentToRender = Register;
                break;
            case ROUTES.FORGOT_PASSWORD:
                ComponentToRender = ForgotPassword;
                break;
            case ROUTES.LOGIN:
            default:
                // Default fallback is the login screen
                ComponentToRender = Login;
                break;
        }
    }

    return <ComponentToRender />;
};

// --- 6. DEFAULT EXPORT WRAPPING ALL CONTEXTS ---
const App = () => (
    <>
        {/* Load Tailwind CDN for styling */}
        <script src="https://cdn.tailwindcss.com"></script>
        {/* Load Inter font and apply global styles */}
        <style>
            {`
                @import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');
                * {
                    font-family: 'Inter', sans-serif;
                }
            `}
        </style>
        <div className="h-screen w-screen overflow-auto">
            <RouterProvider>
                <AuthProvider>
                    <MainApp />
                </AuthProvider>
            </RouterProvider>
        </div>
    </>
);

export default App;
